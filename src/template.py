description = """
// code generated by ./generator.py

// Algorithm: Merge Sort(PoW)
   
// Sort 10 numbers on stack, not using memory.
//     x0, x1, x2, x3, x4, x5, x6, x7, x8, x9
// -> [x0, x1] [x2] [x3, x4] [x5, x6] [x7] [x8, x9]  // need 2 extra slots
// -> [x0, x1, x2] [x3, x4] [x5, x6, x7] [x8, x9]    // need 3 extra slots
// -> [x0, x1, x2, x3, x4] [x5, x6, x7, x8, x9]      // need 5 extra slots
// -> [x0, x1, x2, x3, x4, x5, x6, x7, x8, x9]       // need 10 extra slots

// Merge sorting N numbers requires N extra stack slots for storing intermediate values.
// Sorting 10 numbers would require dup19/swap19, but there are only dup1~16/swap1~16.
// So in the last round, output directly to the memory[0~9] instead of to stack.

// Generate all possible code branches instead of using loops, to avoid those `jump`s.
// In the last round:
//  [x0, x1, x2, x3, x4] [x5, x6, x7, x8, x9]
// Given both x0~x4 and x5~x9 are already sorted, there are only 252 possible transitions.

// Contract size: 7k. (limit 24k)

"""

head = """
#define macro MAIN() = takes(0) returns(0) {

	// copy 10 numbers to stack
	0x4 calldataload 
	0x24 calldataload
	0x44 calldataload
	0x64 calldataload
	0x84 calldataload
	0xa4 calldataload
	0xc4 calldataload
	0xe4 calldataload
	0x104 calldataload
	0x124 calldataload

	// 0x124 calldataload
	// 0x104 calldataload
	// 0xe4 calldataload
	// 0xc4 calldataload
	// 0xa4 calldataload
	// 0x84 calldataload
	// 0x64 calldataload
	// 0x44 calldataload
	// 0x24 calldataload
	// 0x4 calldataload 

"""
tail = """
}
"""
